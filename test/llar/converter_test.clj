(ns llar.converter-test
  (:require
   [clojure.test :refer [deftest is testing]]
   [java-time.api :as time]
   [clojure.java.io :as io]
   [org.bovinegenius [exploding-fish :as uri]]
   [llar.converter :as uut])
  (:import
   (org.bovinegenius.exploding_fish Uri)))

(deftest read-edn-propsfile
  (is (= {:orig-urls #{(uri/uri "http://files.explosm.net/thumbs/videos/splash-5f344ac96cfc2.png")}
          :hits 4
          :mime-type "image/png"}
         (uut/read-edn-propsfile
          "{:orig-urls #{#org.irq0.🖖/url \"http://files.explosm.net/thumbs/videos/splash-5f344ac96cfc2.png\"}, :hits 4, :mime-type \"image/png\"}"))))

(deftest read-edn-state
  (testing
   "regular ok source"
    (is (= {:ok
            {:key :ok,
             :last-successful-fetch-ts (time/zoned-date-time 2020 8 16 12 42 23 0 "Z")
             :last-attempt-ts (time/zoned-date-time 2020 8 16 12 42 23 0 "Z")
             :forced-update? nil,
             :status :ok,
             :last-exception nil,
             :retry-count 0}}
           (uut/read-edn-state
            "{:ok {:key :ok, :last-successful-fetch-ts #org.irq0.🖖/datetime \"2020-08-16T12:42:23.0Z\", :last-attempt-ts #org.irq0.🖖/datetime \"2020-08-16T12:42:23.0Z\", :forced-update? nil, :status :ok, :last-exception nil, :retry-count 0}}\n")))))

(deftest print-exception
  (is (=
       (select-keys (uut/->ExceptionContext nil "foo" (make-array java.lang.StackTraceElement 0) nil {:x :y}) [:message :cause :data])
       (select-keys (uut/read-edn-state (uut/print-state (uut/make-exception-context-from-slingshot-throw-context
                                                          (let [ex (ex-info "foo" {:x :y})]
                                                            {:object ex
                                                             :throwable ex
                                                             :message "foo"
                                                             :stack-trace (make-array java.lang.StackTraceElement 1)}))))
                    [:message :cause :data]))))

(deftest read-what-you-print
  (testing "propsfile"
    (let [in {:orig-urls #{(uri/uri "https://media.wired.com/photos/5bfc71a83ee8d605f3dd0edc/master/w_942,c_limit/googlepixel_top.jpg")}
              :hits 1,
              :mime-type "image/jpeg"}
          out (-> in
                  uut/print-propsfile
                  uut/read-edn-propsfile)]
      (is (= (-> in :orig-urls first type) (-> out :orig-urls first type)))
      (is (instance? Uri (-> out :orig-urls first)))
      (is (= in out))))
  (testing "state"
    (let [state {:ok
                 {:key :ok,
                  :ts (time/zoned-date-time 2020 8 16 12 42 23 23)
                  :duration (time/duration 100 :seconds)
                  :forced-update? nil,
                  :status :ok,
                  :last-exception nil,
                  :retry-count 0}}]
      (is (= state
             (-> state
                 uut/print-state
                 uut/read-edn-state))))))

(def +opml-newsblur+ "<?xml version='1.0' encoding='utf8'?>
  <opml version=\"1.1\"><!--Generated by NewsBlur - newsblur.com--><head><title>NewsBlur Feeds</title><dateCreated>2024-02-20 10:41:39.878385</dateCreated><dateModified>2024-02-20 10:41:39.878385</dateModified></head><body><outline text=\"🄸🅁🅀␀\" title=\"🄸🅁🅀␀\" type=\"rss\" version=\"RSS\" htmlUrl=\"https://irq0.org/\" xmlUrl=\"https://irq0.org/index.xml\" /><outline text=\"nested\" title=\"nested\"><outline text=\"nested feed\" title=\"nested feed\" type=\"rss\" version=\"RSS\" htmlUrl=\"https://example.com/html\" xmlUrl=\"https://example.com/xml\" /></outline></body></opml>")

(deftest read-opml-feeds
  (testing "newsblur"
    (is (= [{:title "🄸🅁🅀␀",
             :type "rss",
             :url (uri/uri "https://irq0.org/index.xml")}
            {:title "nested feed",
             :type "rss",
             :url (uri/uri "https://example.com/xml")}]
           (uut/read-opml-feeds (-> +opml-newsblur+ .getBytes io/input-stream))))))
