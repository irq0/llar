(fetch lwn-weekly (src/website+paywall "https://lwn.net/current"
                                       (fn [] (let [cs ($http-cookie-store)]
                                                ($http-post "https://lwn.net/Login/"
                                                                  {:form-params ($credentials :lwn)
                                                                   :cookie-store cs})
                                                cs))
                                       :user-agent :browser)
       :pre (let [new-items
                  (->> (S/select (S/descendant
                                  (S/class "SummarySection"))
                                 (:hickory $item))
                       first :content
                       (reduce (fn [r $item]
                                 (let [hl-hick (S/select (S/and (S/tag :h3) (S/class "SummaryHL")) $item)
                                       meta-hick (S/select (S/class "FeatureByline") $item)
                                       title (-> hl-hick first :content first :content first)
                                       author (-> meta-hick first :content second :content first)
                                       index (dec (count r))]
                                   (cond
                                     (string? title)
                                     (conj r {:title title
                                              :hick []
                                              :author nil})

                                     (string? author)
                                     (assoc-in r [index :author] author)

                                     (>= index 0)
                                     (update-in r [index :hick] conj $item)

                                     :else
                                     r)))
                               []))]
              ;; Note: html already absolutified / blobified / sanitized by fetcher!
              (for [{:keys [title hick author]} new-items
                    :let [html (-> {:type :element
                                    :attrs nil
                                    :tag :div
                                    :content hick}
                                   $hickory-to-html)]]
                (-> $item
                    (assoc :hash ($make-item-hash title))
                    (assoc-in [:summary :title] title)
                    (assoc-in [:entry :title] title)
                    (assoc :hickory hick)
                    (assoc-in [:entry :authors] [author])
                    (assoc-in [:entry :descriptions]
                              {"text/plain" ""})
                    (assoc-in [:entry :contents]
                              {"text/html" html
                               "text/plain" ($html2text html)}))))
       :tags #{:tech :deep-tech})
